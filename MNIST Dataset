import matplotlib.pyplot as plt
%matplotlib inline

from keras.datasets import mnist
(train_images,train_labels),(test_images,test_labels) = mnist.load_data()

train_images = train_images.reshape((60000, 28 * 28))
train_images = train_images.astype('float32') / 255

test_images = test_images.reshape((10000, 28 * 28))
test_images = test_images.astype('float32') / 255

from keras.utils import to_categorical

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

from keras import models
from keras import layers

network = model.Sequential()
network.add(layers.Dense(512 , activation='relu', input_shape = (28*28,)))
network.add(layers.Dense(10 , activation='softmax'))

network.compile(optimizer = 'rmsprop', loss = 'categorical_crossentropy', metrics=['accuracy'])

network.summary()

network.fit(train_images, train_labels, batch_size = 128, epochs = 5)

test_loss,test_acc = network.evaluate(test_images, test_labels)

preds = network.predict(test_images)

plt.figure(figsize = (12,12))
start_index = 0
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    
    pred = np.argmax(pred[start_index + i])
    gt = test_labels[start_index + i]
    
    col = 'g'
    if pred!=gt:
        col = 'r'
    plt.xlabel('i={}, pred={}, gt={}'.format(i,pred,gt),color=col)
    plt.imshow(test_images[start_index+i],cmap='binary')
plt.show()    
